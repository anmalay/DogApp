/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Gateway.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateUserCommandType,
  DeleteUserCommandType,
  GetUsersGetParams,
  ResultContainerOfUserDtoType,
  UpdateUserCommandType,
} from ".././types";

import { customInstance } from "../../client";

export const postUsersCreate = (
  createUserCommandType: CreateUserCommandType,
  signal?: AbortSignal
) => {
  return customInstance<ResultContainerOfUserDtoType>({
    url: `/Users/Create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserCommandType,
    signal,
  });
};

export const getPostUsersCreateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersCreate>>,
    TError,
    { data: CreateUserCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersCreate>>,
  TError,
  { data: CreateUserCommandType },
  TContext
> => {
  const mutationKey = ["postUsersCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersCreate>>,
    { data: CreateUserCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersCreate>>
>;
export type PostUsersCreateMutationBody = CreateUserCommandType;
export type PostUsersCreateMutationError = unknown;

export const usePostUsersCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postUsersCreate>>,
      TError,
      { data: CreateUserCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postUsersCreate>>,
  TError,
  { data: CreateUserCommandType },
  TContext
> => {
  const mutationOptions = getPostUsersCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putUsersUpdate = (
  updateUserCommandType: UpdateUserCommandType
) => {
  return customInstance<ResultContainerOfUserDtoType>({
    url: `/Users/Update`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateUserCommandType,
  });
};

export const getPutUsersUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUsersUpdate>>,
    TError,
    { data: UpdateUserCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putUsersUpdate>>,
  TError,
  { data: UpdateUserCommandType },
  TContext
> => {
  const mutationKey = ["putUsersUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putUsersUpdate>>,
    { data: UpdateUserCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return putUsersUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutUsersUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putUsersUpdate>>
>;
export type PutUsersUpdateMutationBody = UpdateUserCommandType;
export type PutUsersUpdateMutationError = unknown;

export const usePutUsersUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putUsersUpdate>>,
      TError,
      { data: UpdateUserCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putUsersUpdate>>,
  TError,
  { data: UpdateUserCommandType },
  TContext
> => {
  const mutationOptions = getPutUsersUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteUsersDelete = (
  deleteUserCommandType: DeleteUserCommandType
) => {
  return customInstance<ResultContainerOfUserDtoType>({
    url: `/Users/Delete`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: deleteUserCommandType,
  });
};

export const getDeleteUsersDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersDelete>>,
    TError,
    { data: DeleteUserCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUsersDelete>>,
  TError,
  { data: DeleteUserCommandType },
  TContext
> => {
  const mutationKey = ["deleteUsersDelete"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsersDelete>>,
    { data: DeleteUserCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return deleteUsersDelete(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUsersDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUsersDelete>>
>;
export type DeleteUsersDeleteMutationBody = DeleteUserCommandType;
export type DeleteUsersDeleteMutationError = unknown;

export const useDeleteUsersDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUsersDelete>>,
      TError,
      { data: DeleteUserCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUsersDelete>>,
  TError,
  { data: DeleteUserCommandType },
  TContext
> => {
  const mutationOptions = getDeleteUsersDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getUsersGet = (
  params?: GetUsersGetParams,
  signal?: AbortSignal
) => {
  return customInstance<ResultContainerOfUserDtoType>({
    url: `/Users/Get`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetUsersGetQueryKey = (params?: GetUsersGetParams) => {
  return [`/Users/Get`, ...(params ? [params] : [])] as const;
};

export const getGetUsersGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUsersGet>>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersGet>>> = ({
    signal,
  }) => getUsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersGetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersGet>>
>;
export type GetUsersGetInfiniteQueryError = unknown;

export function useGetUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsersGet>>>,
  TError = unknown
>(
  params: undefined | GetUsersGetParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsersGet>>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsersGet>>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsersGet>>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersGetInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGet>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersGet>>> = ({
    signal,
  }) => getUsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersGet>>
>;
export type GetUsersGetQueryError = unknown;

export function useGetUsersGet<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params: undefined | GetUsersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersGet<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getUsersGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersGet<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGet>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUsersGet<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGet>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersGetQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUsersGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersGet>>> = ({
    signal,
  }) => getUsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersGet>>
>;
export type GetUsersGetSuspenseQueryError = unknown;

export function useGetUsersGetSuspense<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params: undefined | GetUsersGetParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersGetSuspense<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersGetSuspense<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUsersGetSuspense<
  TData = Awaited<ReturnType<typeof getUsersGet>>,
  TError = unknown
>(
  params?: GetUsersGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersGetSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
