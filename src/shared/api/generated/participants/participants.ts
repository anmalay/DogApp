/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Gateway.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateParticipantCommandType,
  DeleteParticipantCommandType,
  GetParticipantsGetParams,
  ResultContainerOfParticipantDtoType,
  UpdateParticipantCommandType,
} from ".././types";

import { customInstance } from "../../client";

export const postParticipantsCreate = (
  createParticipantCommandType: CreateParticipantCommandType,
  signal?: AbortSignal
) => {
  return customInstance<ResultContainerOfParticipantDtoType>({
    url: `/Participants/Create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createParticipantCommandType,
    signal,
  });
};

export const getPostParticipantsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postParticipantsCreate>>,
    TError,
    { data: CreateParticipantCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postParticipantsCreate>>,
  TError,
  { data: CreateParticipantCommandType },
  TContext
> => {
  const mutationKey = ["postParticipantsCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postParticipantsCreate>>,
    { data: CreateParticipantCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return postParticipantsCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostParticipantsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postParticipantsCreate>>
>;
export type PostParticipantsCreateMutationBody = CreateParticipantCommandType;
export type PostParticipantsCreateMutationError = unknown;

export const usePostParticipantsCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postParticipantsCreate>>,
      TError,
      { data: CreateParticipantCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postParticipantsCreate>>,
  TError,
  { data: CreateParticipantCommandType },
  TContext
> => {
  const mutationOptions = getPostParticipantsCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putParticipantsUpdate = (
  updateParticipantCommandType: UpdateParticipantCommandType
) => {
  return customInstance<ResultContainerOfParticipantDtoType>({
    url: `/Participants/Update`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateParticipantCommandType,
  });
};

export const getPutParticipantsUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putParticipantsUpdate>>,
    TError,
    { data: UpdateParticipantCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putParticipantsUpdate>>,
  TError,
  { data: UpdateParticipantCommandType },
  TContext
> => {
  const mutationKey = ["putParticipantsUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putParticipantsUpdate>>,
    { data: UpdateParticipantCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return putParticipantsUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutParticipantsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putParticipantsUpdate>>
>;
export type PutParticipantsUpdateMutationBody = UpdateParticipantCommandType;
export type PutParticipantsUpdateMutationError = unknown;

export const usePutParticipantsUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putParticipantsUpdate>>,
      TError,
      { data: UpdateParticipantCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putParticipantsUpdate>>,
  TError,
  { data: UpdateParticipantCommandType },
  TContext
> => {
  const mutationOptions = getPutParticipantsUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteParticipantsDelete = (
  deleteParticipantCommandType: DeleteParticipantCommandType
) => {
  return customInstance<ResultContainerOfParticipantDtoType>({
    url: `/Participants/Delete`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: deleteParticipantCommandType,
  });
};

export const getDeleteParticipantsDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteParticipantsDelete>>,
    TError,
    { data: DeleteParticipantCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteParticipantsDelete>>,
  TError,
  { data: DeleteParticipantCommandType },
  TContext
> => {
  const mutationKey = ["deleteParticipantsDelete"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteParticipantsDelete>>,
    { data: DeleteParticipantCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return deleteParticipantsDelete(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteParticipantsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteParticipantsDelete>>
>;
export type DeleteParticipantsDeleteMutationBody = DeleteParticipantCommandType;
export type DeleteParticipantsDeleteMutationError = unknown;

export const useDeleteParticipantsDelete = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteParticipantsDelete>>,
      TError,
      { data: DeleteParticipantCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteParticipantsDelete>>,
  TError,
  { data: DeleteParticipantCommandType },
  TContext
> => {
  const mutationOptions = getDeleteParticipantsDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getParticipantsGet = (
  params?: GetParticipantsGetParams,
  signal?: AbortSignal
) => {
  return customInstance<ResultContainerOfParticipantDtoType>({
    url: `/Participants/Get`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetParticipantsGetQueryKey = (
  params?: GetParticipantsGetParams
) => {
  return [`/Participants/Get`, ...(params ? [params] : [])] as const;
};

export const getGetParticipantsGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getParticipantsGet>>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetParticipantsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getParticipantsGet>>
  > = ({ signal }) => getParticipantsGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getParticipantsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParticipantsGetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParticipantsGet>>
>;
export type GetParticipantsGetInfiniteQueryError = unknown;

export function useGetParticipantsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getParticipantsGet>>>,
  TError = unknown
>(
  params: undefined | GetParticipantsGetParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipantsGet>>,
          TError,
          Awaited<ReturnType<typeof getParticipantsGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParticipantsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getParticipantsGet>>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipantsGet>>,
          TError,
          Awaited<ReturnType<typeof getParticipantsGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParticipantsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getParticipantsGet>>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetParticipantsGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getParticipantsGet>>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetParticipantsGetInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetParticipantsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetParticipantsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getParticipantsGet>>
  > = ({ signal }) => getParticipantsGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getParticipantsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParticipantsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParticipantsGet>>
>;
export type GetParticipantsGetQueryError = unknown;

export function useGetParticipantsGet<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params: undefined | GetParticipantsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipantsGet>>,
          TError,
          Awaited<ReturnType<typeof getParticipantsGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParticipantsGet<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParticipantsGet>>,
          TError,
          Awaited<ReturnType<typeof getParticipantsGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParticipantsGet<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetParticipantsGet<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetParticipantsGetQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetParticipantsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetParticipantsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getParticipantsGet>>
  > = ({ signal }) => getParticipantsGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getParticipantsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetParticipantsGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParticipantsGet>>
>;
export type GetParticipantsGetSuspenseQueryError = unknown;

export function useGetParticipantsGetSuspense<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params: undefined | GetParticipantsGetParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParticipantsGetSuspense<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetParticipantsGetSuspense<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetParticipantsGetSuspense<
  TData = Awaited<ReturnType<typeof getParticipantsGet>>,
  TError = unknown
>(
  params?: GetParticipantsGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getParticipantsGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetParticipantsGetSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
