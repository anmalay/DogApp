/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Gateway.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateActivityCommandType,
  DeleteActivityCommandType,
  EnumerationDtoType,
  GetActivitiesGetParams,
  PostActivitiesUploadActivityImageBody,
  ResultContainerOfActivityDtoType,
  UpdateActivityCommandType,
} from ".././types";

import { customInstance } from "../../client";

export const getActivitiesGetAllActivityCategories = (signal?: AbortSignal) => {
  return customInstance<EnumerationDtoType[]>({
    url: `/Activities/GetAllActivityCategories`,
    method: "GET",
    signal,
  });
};

export const getGetActivitiesGetAllActivityCategoriesQueryKey = () => {
  return [`/Activities/GetAllActivityCategories`] as const;
};

export const getGetActivitiesGetAllActivityCategoriesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  >,
  TError = unknown
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetActivitiesGetAllActivityCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  > = ({ signal }) => getActivitiesGetAllActivityCategories(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesGetAllActivityCategoriesInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  >;
export type GetActivitiesGetAllActivityCategoriesInfiniteQueryError = unknown;

export function useGetActivitiesGetAllActivityCategoriesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  >,
  TError = unknown
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetAllActivityCategoriesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  >,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetAllActivityCategoriesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  >,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesGetAllActivityCategoriesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  >,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetActivitiesGetAllActivityCategoriesInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetActivitiesGetAllActivityCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetActivitiesGetAllActivityCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  > = ({ signal }) => getActivitiesGetAllActivityCategories(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesGetAllActivityCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
>;
export type GetActivitiesGetAllActivityCategoriesQueryError = unknown;

export function useGetActivitiesGetAllActivityCategories<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetAllActivityCategories<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetAllActivityCategories<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesGetAllActivityCategories<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetActivitiesGetAllActivityCategoriesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetActivitiesGetAllActivityCategoriesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetActivitiesGetAllActivityCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  > = ({ signal }) => getActivitiesGetAllActivityCategories(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesGetAllActivityCategoriesSuspenseQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>
  >;
export type GetActivitiesGetAllActivityCategoriesSuspenseQueryError = unknown;

export function useGetActivitiesGetAllActivityCategoriesSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetAllActivityCategoriesSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetAllActivityCategoriesSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesGetAllActivityCategoriesSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGetAllActivityCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetActivitiesGetAllActivityCategoriesSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postActivitiesUploadActivityImage = (
  postActivitiesUploadActivityImageBody: PostActivitiesUploadActivityImageBody,
  signal?: AbortSignal
) => {
  const formUrlEncoded = new URLSearchParams();
  if (postActivitiesUploadActivityImageBody.ContentType !== undefined) {
    formUrlEncoded.append(
      `ContentType`,
      postActivitiesUploadActivityImageBody.ContentType
    );
  }
  if (postActivitiesUploadActivityImageBody.ContentDisposition !== undefined) {
    formUrlEncoded.append(
      `ContentDisposition`,
      postActivitiesUploadActivityImageBody.ContentDisposition
    );
  }
  if (postActivitiesUploadActivityImageBody.Headers !== undefined) {
    formUrlEncoded.append(
      `Headers`,
      JSON.stringify(postActivitiesUploadActivityImageBody.Headers)
    );
  }
  if (postActivitiesUploadActivityImageBody.Length !== undefined) {
    formUrlEncoded.append(
      `Length`,
      postActivitiesUploadActivityImageBody.Length.toString()
    );
  }
  if (postActivitiesUploadActivityImageBody.Name !== undefined) {
    formUrlEncoded.append(`Name`, postActivitiesUploadActivityImageBody.Name);
  }
  if (postActivitiesUploadActivityImageBody.FileName !== undefined) {
    formUrlEncoded.append(
      `FileName`,
      postActivitiesUploadActivityImageBody.FileName
    );
  }

  if (postActivitiesUploadActivityImageBody.activityId !== undefined) {
    formUrlEncoded.append(
      `activityId`,
      postActivitiesUploadActivityImageBody.activityId
    );
  }

  return customInstance<void>({
    url: `/Activities/UploadActivityImage`,
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    data: formUrlEncoded,
    signal,
  });
};

export const getPostActivitiesUploadActivityImageMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postActivitiesUploadActivityImage>>,
    TError,
    { data: PostActivitiesUploadActivityImageBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postActivitiesUploadActivityImage>>,
  TError,
  { data: PostActivitiesUploadActivityImageBody },
  TContext
> => {
  const mutationKey = ["postActivitiesUploadActivityImage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postActivitiesUploadActivityImage>>,
    { data: PostActivitiesUploadActivityImageBody }
  > = (props) => {
    const { data } = props ?? {};

    return postActivitiesUploadActivityImage(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostActivitiesUploadActivityImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof postActivitiesUploadActivityImage>>
>;
export type PostActivitiesUploadActivityImageMutationBody =
  PostActivitiesUploadActivityImageBody;
export type PostActivitiesUploadActivityImageMutationError = unknown;

export const usePostActivitiesUploadActivityImage = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postActivitiesUploadActivityImage>>,
      TError,
      { data: PostActivitiesUploadActivityImageBody },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postActivitiesUploadActivityImage>>,
  TError,
  { data: PostActivitiesUploadActivityImageBody },
  TContext
> => {
  const mutationOptions =
    getPostActivitiesUploadActivityImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postActivitiesCreate = (
  createActivityCommandType: CreateActivityCommandType,
  signal?: AbortSignal
) => {
  return customInstance<ResultContainerOfActivityDtoType>({
    url: `/Activities/Create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createActivityCommandType,
    signal,
  });
};

export const getPostActivitiesCreateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postActivitiesCreate>>,
    TError,
    { data: CreateActivityCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postActivitiesCreate>>,
  TError,
  { data: CreateActivityCommandType },
  TContext
> => {
  const mutationKey = ["postActivitiesCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postActivitiesCreate>>,
    { data: CreateActivityCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return postActivitiesCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostActivitiesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postActivitiesCreate>>
>;
export type PostActivitiesCreateMutationBody = CreateActivityCommandType;
export type PostActivitiesCreateMutationError = unknown;

export const usePostActivitiesCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postActivitiesCreate>>,
      TError,
      { data: CreateActivityCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postActivitiesCreate>>,
  TError,
  { data: CreateActivityCommandType },
  TContext
> => {
  const mutationOptions = getPostActivitiesCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putActivitiesUpdate = (
  updateActivityCommandType: UpdateActivityCommandType
) => {
  return customInstance<ResultContainerOfActivityDtoType>({
    url: `/Activities/Update`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateActivityCommandType,
  });
};

export const getPutActivitiesUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putActivitiesUpdate>>,
    TError,
    { data: UpdateActivityCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putActivitiesUpdate>>,
  TError,
  { data: UpdateActivityCommandType },
  TContext
> => {
  const mutationKey = ["putActivitiesUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putActivitiesUpdate>>,
    { data: UpdateActivityCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return putActivitiesUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutActivitiesUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putActivitiesUpdate>>
>;
export type PutActivitiesUpdateMutationBody = UpdateActivityCommandType;
export type PutActivitiesUpdateMutationError = unknown;

export const usePutActivitiesUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putActivitiesUpdate>>,
      TError,
      { data: UpdateActivityCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putActivitiesUpdate>>,
  TError,
  { data: UpdateActivityCommandType },
  TContext
> => {
  const mutationOptions = getPutActivitiesUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteActivitiesDelete = (
  deleteActivityCommandType: DeleteActivityCommandType
) => {
  return customInstance<ResultContainerOfActivityDtoType>({
    url: `/Activities/Delete`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: deleteActivityCommandType,
  });
};

export const getDeleteActivitiesDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteActivitiesDelete>>,
    TError,
    { data: DeleteActivityCommandType },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteActivitiesDelete>>,
  TError,
  { data: DeleteActivityCommandType },
  TContext
> => {
  const mutationKey = ["deleteActivitiesDelete"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteActivitiesDelete>>,
    { data: DeleteActivityCommandType }
  > = (props) => {
    const { data } = props ?? {};

    return deleteActivitiesDelete(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteActivitiesDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteActivitiesDelete>>
>;
export type DeleteActivitiesDeleteMutationBody = DeleteActivityCommandType;
export type DeleteActivitiesDeleteMutationError = unknown;

export const useDeleteActivitiesDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteActivitiesDelete>>,
      TError,
      { data: DeleteActivityCommandType },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteActivitiesDelete>>,
  TError,
  { data: DeleteActivityCommandType },
  TContext
> => {
  const mutationOptions = getDeleteActivitiesDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getActivitiesGet = (
  params?: GetActivitiesGetParams,
  signal?: AbortSignal
) => {
  return customInstance<ResultContainerOfActivityDtoType>({
    url: `/Activities/Get`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetActivitiesGetQueryKey = (
  params?: GetActivitiesGetParams
) => {
  return [`/Activities/Get`, ...(params ? [params] : [])] as const;
};

export const getGetActivitiesGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getActivitiesGet>>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetActivitiesGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActivitiesGet>>
  > = ({ signal }) => getActivitiesGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getActivitiesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesGetInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActivitiesGet>>
>;
export type GetActivitiesGetInfiniteQueryError = unknown;

export function useGetActivitiesGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getActivitiesGet>>>,
  TError = unknown
>(
  params: undefined | GetActivitiesGetParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getActivitiesGet>>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getActivitiesGet>>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getActivitiesGet>>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetActivitiesGetInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetActivitiesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetActivitiesGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActivitiesGet>>
  > = ({ signal }) => getActivitiesGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActivitiesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActivitiesGet>>
>;
export type GetActivitiesGetQueryError = unknown;

export function useGetActivitiesGet<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params: undefined | GetActivitiesGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGet<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesGet>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesGet>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGet<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesGet<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetActivitiesGetQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetActivitiesGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetActivitiesGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActivitiesGet>>
  > = ({ signal }) => getActivitiesGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getActivitiesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActivitiesGet>>
>;
export type GetActivitiesGetSuspenseQueryError = unknown;

export function useGetActivitiesGetSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params: undefined | GetActivitiesGetParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesGetSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesGetSuspense<
  TData = Awaited<ReturnType<typeof getActivitiesGet>>,
  TError = unknown
>(
  params?: GetActivitiesGetParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesGet>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetActivitiesGetSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
