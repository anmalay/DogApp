/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Gateway.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseQuery,
} from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { GetGetFileParams } from ".././types";

import { customInstance } from "../../client";

export const getGetFile = (params?: GetGetFileParams, signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/GetFile`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetGetFileQueryKey = (params?: GetGetFileParams) => {
  return [`/GetFile`, ...(params ? [params] : [])] as const;
};

export const getGetGetFileInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getGetFile>>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGetFileQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGetFile>>> = ({
    signal,
  }) => getGetFile(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getGetFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGetFileInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGetFile>>
>;
export type GetGetFileInfiniteQueryError = unknown;

export function useGetGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getGetFile>>>,
  TError = unknown
>(
  params: undefined | GetGetFileParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGetFile>>,
          TError,
          Awaited<ReturnType<typeof getGetFile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getGetFile>>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGetFile>>,
          TError,
          Awaited<ReturnType<typeof getGetFile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getGetFile>>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetGetFileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getGetFile>>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGetFileInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetGetFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGetFile>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGetFileQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGetFile>>> = ({
    signal,
  }) => getGetFile(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGetFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGetFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGetFile>>
>;
export type GetGetFileQueryError = unknown;

export function useGetGetFile<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params: undefined | GetGetFileParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGetFile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGetFile>>,
          TError,
          Awaited<ReturnType<typeof getGetFile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGetFile<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGetFile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGetFile>>,
          TError,
          Awaited<ReturnType<typeof getGetFile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGetFile<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGetFile>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetGetFile<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGetFile>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGetFileQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetGetFileSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGetFileQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGetFile>>> = ({
    signal,
  }) => getGetFile(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getGetFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGetFileSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGetFile>>
>;
export type GetGetFileSuspenseQueryError = unknown;

export function useGetGetFileSuspense<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params: undefined | GetGetFileParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGetFileSuspense<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGetFileSuspense<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetGetFileSuspense<
  TData = Awaited<ReturnType<typeof getGetFile>>,
  TError = unknown
>(
  params?: GetGetFileParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGetFile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGetFileSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
